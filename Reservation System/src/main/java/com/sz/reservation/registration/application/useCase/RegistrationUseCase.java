package com.sz.reservation.registration.application.useCase;

import com.google.common.io.Files;
import com.sz.reservation.registration.application.port.outbound.UserRegistrationDb;
import com.sz.reservation.registration.exception.EmptyMediaException;
import com.sz.reservation.registration.exception.MediaNotSupportedException;
import com.sz.reservation.registration.infrastructure.inbound.UserRequest;
import com.sz.reservation.util.FileTypeValidator;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;


public class RegistrationUseCase {
    private UserRegistrationDb userRegistrationDb;
    private FileTypeValidator fileValidator;

    @Autowired
    public RegistrationUseCase(UserRegistrationDb userRegistrationDb, FileTypeValidator fileValidator) {
        this.userRegistrationDb = userRegistrationDb;
        this.fileValidator = fileValidator;
    }

    public void registerNotEnabledUser(UserRequest userRequest) {
        MultipartFile profilePicture = userRequest.getProfilePicture();
        if (!isProfilePictureImageValid(profilePicture)) {
            throw new MediaNotSupportedException();
        }
        //TODO: MODIFY THE PROFILE PICTURE CLASS TO RECEIVE A IMAGE OR FILE OBJECT, NOT A MULTIPART
        //TODO: CONVERT THE UPLOADED FILE INTO A PROFILEPICTURE OBJECT
        //TODO: VALIDATE THE PROFILE PICTURE OBJECT
        //TODO: ADD EMPTYMEDIAEXCEPTION TO GLOBALHANDLER
        //TODO: Change the filename to something generated by the application
        //TODO: Set a filename length limit. Restrict the allowed characters if possible
        //TODO: Store the file
        //TODO: Protect the file upload from CSRF attacks

        userRegistrationDb.registerNotEnabledUser(null);/*fill the details later*/

    }

    private boolean isProfilePictureImageValid(MultipartFile profilePicture) {
        MediaType mediaType = null;
        try {
            if (profilePicture.isEmpty()) throw new EmptyMediaException();
            if (!isProfilePictureExtensionValid(profilePicture)) return false;
            mediaType = fileValidator.getRealFileType(profilePicture.getInputStream());
        } catch (IOException e) {
            throw new RuntimeException(e); // should throw internal 500 error in global handler
        }
        return mediaType.equals(MediaType.IMAGE_JPEG) || mediaType.equals(MediaType.IMAGE_PNG);
    }

    private boolean isProfilePictureExtensionValid(MultipartFile profilePicture) {
        //check if file extension matches with the mediaType returned from the file validator
        if (!Files.getFileExtension(profilePicture.getOriginalFilename()).equals(MediaType.IMAGE_PNG_VALUE) ||
                !Files.getFileExtension(profilePicture.getOriginalFilename()).equals(MediaType.IMAGE_JPEG_VALUE)) {
            return false;
        }
        return true;
    }

}